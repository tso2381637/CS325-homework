Q0.
useful fact 1: the max number of elements in height h is n/2^{h+1}
useful fact 2: 1/2 + 2/4 + 3/8 + ... 
             = (1/2 + 1/4 + 1/8 + ...) + (0 + 1/4 + 2/8 + 3/16 + ...) 
             = 1 + (1/4 + 1/8 + 1/16 + ...) + (1/8 + 2/16 + 3/32 + ...) 
             = 1 + 1/2 + ... = 2.

insert (heappush) one-by-one:
each heappush has a bubble-up operation
so the number of bubble-up operations is:

  sum O(logn - h) n/(2^{h+1}) 
= O(nlogn) \times sum 1/2^h - O(n) sum h/2^h    
= O(nlogn) - O(n) = O(nlogn)  

compare with top-down heapify:
we only have sum O(h) n/(2^{h+1}) = O(n) sum h/2^h = O(n x 2) = O(n)

h is from 0 to logn in both analyses.

more detailed of analysis is on page 135 (chapter 6.3) of CLRS (2nd edition).
(and KT slides referred to in HW4, but *not* in KT book).

high-level intuitions: 
top-down heapify is faster because the majority (lowest levels) requires very little work (bubble-down to the leaves), 
while heappush one-by-one is slower because the majority requires the most work (bubble-up all the way to the root).

Q1. (a) O(n^2 logn) (b) O(n^2) (c) O(nlogn)

Q2. 
first level: merging k sorted lists, with total length of all k lists being n. 
time: O(k + nlogk) = O(nlogk). 
note the O(k) here is for heapify of the k "leaders" (if instead you create a heap of size k using k heappushes, that's O(klogk) 
-- still won't change anything because O(klogk + nlogk) = O(nlogk) as k <= n.)

second level: k subtasks, each one has O(n/k log k) => total: O(nlogk)
third level: k^2 subtasks, each one has O(n/(k^2) logk) => total: O(nlogk).
...
every level is the same O(nlogk).

how many levels? h = log_k n (using logarithm with base k instead of 2).

total time: O(nlogk * log_k n) = O(nlogk * log n / logk) = O(nlogn)    (note: by definition, log_k n = log n / log k)

side note: as discussed on Slack, this analysis even works with the extreme case of k = n.
In this case, k-way mergesort is equal to heapsort (heapify first, and the keep popping the min).

Note: heapq.merge() is exactly what we wanted: merging several sorted lists.

Q3. O(nlogk)

Q4. 

|--------------+-----------------+------------------+--------------------+-----------------------+----------------------------|
|              | (a) binary heap | (b) sorted array | (c) unsorted array | (d) sorted linkedlist | (e) reversely sorted array |
|--------------+-----------------+------------------+--------------------+-----------------------+----------------------------|
| (1) push     | O(logn)         | O(n)             | amortized O(1)     | O(n)                  | O(n)                       |
|--------------+-----------------+------------------+--------------------+-----------------------+----------------------------|
| (2) pop-min  | O(logn)         | O(n)             | O(n)               | O(1)                  | amortized O(1)             |
|--------------+-----------------+------------------+--------------------+-----------------------+----------------------------|
| (3) peak-min | O(1)            | O(1)             | O(n) **            | O(1)                  | O(1)                       |
|--------------+-----------------+------------------+--------------------+-----------------------+----------------------------|
| (4) heapify  | O(n)            | O(nlogn) ***     | O(n)               | O(nlogn) ***          | O(nlogn) ***               |
|--------------+-----------------+------------------+--------------------+-----------------------+----------------------------|

Note: (b) the first element has the highest priority; (e) the first element has the lowest priority.
 ** if you further keep track of the min position, then peak-min would be O(1). 
    remember to update that min position in push (still O(1)) and pop-min (still O(n)).
*** the input list is unsorted, so you need to sort it to make a priority queue.


See also:
https://www.cs.cmu.edu/~adamchik/15-121/lectures/Binary%20Heaps/heaps.html
http://cs.lmu.edu/~ray/notes/pqueues/


